name: YouTube Playlist Downloader (Cookies)
on:
  workflow_dispatch:
    inputs:
      playlist_url:
        description: 'URL de la playlist YouTube'
        required: true
      quality:
        description: 'Qualit√© vid√©o'
        required: true
        default: '720p'
        type: choice
        options:
        - 1080p
        - 720p
        - 480p

jobs:
  youtube-downloader:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
    - name: Install YouTube Tools
      run: |
        echo "üîß Installation des outils..."
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-pip aria2
        pip3 install yt-dlp
        
    - name: Setup Cookies from Secret
      run: |
        echo "üç™ Configuration des cookies YouTube..."
        echo '${{ secrets.YOUTUBE_COOKIES }}' > cookies.txt
        
        if [ -s cookies.txt ]; then
          echo "‚úÖ Cookies charg√©s avec succ√®s"
        else
          echo "‚ùå Erreur: Fichier cookies vide"
          exit 1
        fi
        
    - name: Download Playlist with Cookies
      run: |
        echo "üé¨ T√©l√©chargement avec cookies..."
        
        # Configuration qualit√©
        if [ "${{ inputs.quality }}" = "1080p" ]; then
          FORMAT="bestvideo[height<=1080]+bestaudio/best[height<=1080]"
        elif [ "${{ inputs.quality }}" = "720p" ]; then
          FORMAT="bestvideo[height<=720]+bestaudio/best[height<=720]"
        elif [ "${{ inputs.quality }}" = "480p" ]; then
          FORMAT="bestvideo[height<=480]+bestaudio/best[height<=480]"
        else
          FORMAT="bestvideo[height<=720]+bestaudio/best[height<=720]"
        fi
        
        # T√©l√©chargement avec cookies - VERSION CORRIG√âE
        yt-dlp \
          --cookies cookies.txt \
          --format "$FORMAT" \
          --merge-output-format mp4 \
          --output "playlist_videos/%(title)s.%(ext)s" \
          --concurrent-fragments 16 \
          --external-downloader aria2c \
          --external-downloader-args "-x 16 -k 1M -s 16 -j 16" \
          --ignore-errors \
          --no-overwrites \
          --continue \
          "${{ inputs.playlist_url }}"
          
        echo "‚úÖ T√©l√©chargement termin√© !"
        
    - name: Create Organized ZIP
      run: |
        echo "üóúÔ∏è Cr√©ation de l'archive ZIP..."
        
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        ZIP_NAME="youtube_playlist_${TIMESTAMP}.zip"
        
        # V√©rifier si des vid√©os ont √©t√© t√©l√©charg√©es
        if [ -d "playlist_videos" ] && [ "$(ls -A playlist_videos)" ]; then
          zip -r "${ZIP_NAME}" "playlist_videos/" -9
          VIDEO_COUNT=$(find playlist_videos/ -name "*.mp4" | wc -l)
          ZIP_SIZE=$(du -h "${ZIP_NAME}" | cut -f1)
          echo "üì¶ Archive: ${ZIP_NAME}"
          echo "üé¨ Vid√©os: ${VIDEO_COUNT}"
          echo "üíæ Taille: ${ZIP_SIZE}"
        else
          echo "‚ùå Aucune vid√©o t√©l√©charg√©e"
          echo "YouTube bloque peut-√™tre encore" > error.txt
          zip "${ZIP_NAME}" "error.txt"
        fi
        
    - name: Upload ZIP Artifact
      uses: actions/upload-artifact@v4
      with:
        name: youtube-playlist
        path: youtube_playlist_*.zip
        retention-days: 30
        
    - name: Cleanup Cookies
      run: |
        rm -f cookies.txt
        echo "‚úÖ Cookies supprim√©s"
        
    - name: Final Summary
      run: |
        echo " "
        echo "üéâ PROCESSUS TERMIN√â !"
        echo "========================"
        echo "üìπ Playlist: ${{ inputs.playlist_url }}"
        echo "‚¨áÔ∏è ZIP disponible dans 'Artifacts'"
        echo "========================"
